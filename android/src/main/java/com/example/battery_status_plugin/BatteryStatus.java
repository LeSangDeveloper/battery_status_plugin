// Autogenerated from Pigeon (v4.2.10), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.battery_status_plugin;

import android.content.Context;
import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class BatteryStatus {

  public enum State {
    SUCCESS(0),
    ERROR(1);

    private final int index;
    private State(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class BatteryStatusResult {
    private @NonNull State state;
    public @NonNull State getState() { return state; }
    public void setState(@NonNull State setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"state\" is null.");
      }
      this.state = setterArg;
    }

    private @NonNull String message;
    public @NonNull String getMessage() { return message; }
    public void setMessage(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"message\" is null.");
      }
      this.message = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private BatteryStatusResult() {}
    public static final class Builder {
      private @Nullable State state;
      public @NonNull Builder setState(@NonNull State setterArg) {
        this.state = setterArg;
        return this;
      }
      private @Nullable String message;
      public @NonNull Builder setMessage(@NonNull String setterArg) {
        this.message = setterArg;
        return this;
      }
      public @NonNull BatteryStatusResult build() {
        BatteryStatusResult pigeonReturn = new BatteryStatusResult();
        pigeonReturn.setState(state);
        pigeonReturn.setMessage(message);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("state", state == null ? null : state.index);
      toMapResult.put("message", message);
      return toMapResult;
    }
    static @NonNull BatteryStatusResult fromMap(@NonNull Map<String, Object> map) {
      BatteryStatusResult pigeonResult = new BatteryStatusResult();
      Object state = map.get("state");
      pigeonResult.setState(state == null ? null : State.values()[(int)state]);
      Object message = map.get("message");
      pigeonResult.setMessage((String)message);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class BatteryStatusApiCodec extends StandardMessageCodec {
    public static final BatteryStatusApiCodec INSTANCE = new BatteryStatusApiCodec();
    private BatteryStatusApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return BatteryStatusResult.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof BatteryStatusResult) {
        stream.write(128);
        writeValue(stream, ((BatteryStatusResult) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface BatteryStatusApi {
    void getBatteryStatus(@NonNull String messageFromPlugin, Result<BatteryStatusResult> result, Context context);

    /** The codec used by BatteryStatusApi. */
    static MessageCodec<Object> getCodec() {
      return       BatteryStatusApiCodec.INSTANCE;    }
    /**Sets up an instance of `BatteryStatusApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, BatteryStatusApi api, FlutterPlugin.FlutterPluginBinding binding) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BatteryStatusApi.getBatteryStatus", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String messageFromPluginArg = (String)args.get(0);
              if (messageFromPluginArg == null) {
                throw new NullPointerException("messageFromPluginArg unexpectedly null.");
              }
              Result<BatteryStatusResult> resultCallback = new Result<BatteryStatusResult>() {
                public void success(BatteryStatusResult result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              Context context = binding.getApplicationContext().getApplicationContext();

              api.getBatteryStatus(messageFromPluginArg, resultCallback, context);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  @NonNull private static Map<String, Object> wrapError(@NonNull Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
